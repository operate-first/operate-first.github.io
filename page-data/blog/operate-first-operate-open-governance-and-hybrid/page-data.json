{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/blog/operate-first-operate-open-governance-and-hybrid","result":{"data":{"post":{"slug":"/blog/operate-first-operate-open-governance-and-hybrid","title":"Operate First - Operate, Open, Governance and Hybrid","date":"11.08.2022","tags":[{"name":"OperateFirst","slug":"operate-first"},{"name":"Operate","slug":"operate"},{"name":"Open","slug":"open"},{"name":"Governance","slug":"governance"},{"name":"Hybrid","slug":"hybrid"},{"name":"Software","slug":"software"},{"name":"Principles","slug":"principles"}],"description":"Operate First - 4 key concepts","canonicalUrl":null,"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Operate First - Operate, Open, Governance and Hybrid\",\n  \"date\": \"2022-08-11T00:00:00.000Z\",\n  \"author\": \"Nick Barcet\",\n  \"description\": \"Operate First - 4 key concepts\",\n  \"tags\": [\"OperateFirst\", \"Operate\", \"Open\", \"Governance\", \"Hybrid\", \"Software\", \"Principles\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"By Nick Barcet\")), mdx(\"p\", null, \"Operate First regroups a few concepts, relying on standard definitions of Open, Open Source, and Open Work:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"OPERATE\"), \": We build software optimized to run as a service and allow others to run it as a service easily, including documenting how we operate the cloud environment itself.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"OPEN\"), \": We develop open source practices, tooling, and documentation that allows us to build and manage our software, incorporate lessons we\\u2019ve learned from operations back into code, automate wherever possible, and contribute to open source communities.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"GOVERNANCE\"), \": We foster inclusive, respectful, and collaborative communities through clear standards and accepted practices (e.g., codes of conduct) so participants are empowered to contribute.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"HYBRID\"), \": We ensure that there is no dependency in our tooling to the cloud environment we are operating In by always verifying our software and management tooling works identically on at least one other platform (another cloud, in a private data center, \\u2026)\"))), mdx(\"h3\", null, \"Why are we defining Operate First?\"), mdx(\"p\", null, \"Because Upstream First was not enough anymore to deliver the values of Open Source in today\\u2019s service world.\"), mdx(\"p\", null, \"It\\u2019s not enough to just deliver our code in an upstream community if we do not ensure that we also apply it to everything else we use to operate it as a service.\"), mdx(\"p\", null, \"It\\u2019s not enough to just deliver software without having first-hand experience of what it means to operate it.\"), mdx(\"p\", null, \"It\\u2019s not enough to ensure that it works on a single cloud if we care about its hybridity.\"), mdx(\"p\", null, \"It wasn\\u2019t enough to drop code once in a while to do \\xAB real \\xBB Open Source, but inclusive governance should no longer be an option. Inclusivity must apply to anyone, including those who spend time ensuring the reliability of a service, including those that use the service, not just to those who code the service itself.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"By Nick Barcet Operate First regroups a few concepts, relying on standard definitions of Open, Open Source, and Open Work: OPERATE : Weâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/blog/operate-first-operate-open-governance-and-hybrid","formatString":"DD.MM.YYYY"}},"staticQueryHashes":[]}